---
import SunAndMoonIcon from "../images/icons/sun_and_moon.svg?raw";
const pathname = new URL(Astro.request.url).pathname;
const activeRoute = pathname.slice(1);
---

<nav class="navbar navbar-expand-sm">
  <div class="container">
    <a class="navbar-brand" href="/">Unregelmäßige Verben</a>
    <div class="collapse navbar-collapse navbar-desktop">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class={activeRoute === "/" ? "nav-link active" : "nav-link"} href="/">
            Verben
          </a>
        </li>
        <li class="nav-item">
          <a class={activeRoute === "/quix" ? "nav-link active" : "nav-link"} href="/quiz">
            Quiz
          </a>
        </li>
      </ul>
      <div class="x-theme-label nav-item is-clickable">
        <Fragment set:html={SunAndMoonIcon}/>
      </div>
    </div>
    
    <div class="navbar-mobile">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class={activeRoute === "/" ? "nav-link active" : "nav-link"} href="/">
            Verben
          </a>
        </li>
        <li class="nav-item">
          <a class={activeRoute === "/quiz" ? "nav-link active" : "nav-link"} href="/quiz">
            Quiz
          </a>
        </li>
        <li class="x-theme-label nav-item is-clickable">
          <Fragment set:html={SunAndMoonIcon}/>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
enum UiTheme {
  light = "light",
  dark = "dark"
}

const UI_THEME_STORAGE_KEY = "ui_theme";
const DEFAULT_UI_THEME = UiTheme.light;

function initTheme(){
  const storedThemeChoice = localStorage.getItem(UI_THEME_STORAGE_KEY);
  const theme = (storedThemeChoice || DEFAULT_UI_THEME) as UiTheme;
  if(!!storedThemeChoice){
    localStorage.setItem(UI_THEME_STORAGE_KEY, theme);
  }
  document.getElementsByTagName('html')[0].setAttribute('data-bs-theme', theme);
}

function switchTheme() {
  const storedThemeChoice = localStorage.getItem(UI_THEME_STORAGE_KEY);
  const selectedTheme = (storedThemeChoice || DEFAULT_UI_THEME) as UiTheme;

  if(selectedTheme === UiTheme.light){
    localStorage.setItem(UI_THEME_STORAGE_KEY, UiTheme.dark);
    document.getElementsByTagName('html')[0].setAttribute('data-bs-theme', UiTheme.dark);
  } else {
    localStorage.setItem(UI_THEME_STORAGE_KEY, UiTheme.light);
    document.getElementsByTagName('html')[0].setAttribute('data-bs-theme', UiTheme.light);
  }
}

initTheme()
document.querySelectorAll('.x-theme-label').forEach(element => {
  element.addEventListener('click', () => {
    switchTheme()
  })
});
</script>

<style>
.navbar {
  .navbar-brand {
    text-align: center;
    width: 100%;
  }
}
.navbar-desktop {
  display: none;
}
.navbar-mobile{
  display: flex;
  justify-content: center;
  width: 100%;
  .navbar-nav {
    width: 100%;
    flex-direction: row;
    justify-content: center;
    gap:2rem
  }
  .nav-item.is-clickable {
    align-items: center;
    display: flex;
  }
}
@media (min-device-width: 576px) {
  .navbar {
    .navbar-brand {
      width: unset;
    }
  }
  .navbar-desktop {
    display: unset;
  }
  .navbar-mobile {
    display: none;
  }
}
@media (min-device-width: 750px) {
  .navbar-container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    .navbar-nav {
      display: flex;
      flex-direction: row;
      gap: 1rem
    }
  }
}

.x-theme-label > :global(svg) {
  width: 1.6rem;
  height: 1.6rem;
  transition: all 500ms ease-in-out;
  &:hover{
    fill: rgb(207, 187, 11);
  }
}

@include color-mode(dark) {
  .x-theme-label > :global(svg) {
    &:hover{
      fill: rgb(28, 52, 172);
    }
  }
}
</style>